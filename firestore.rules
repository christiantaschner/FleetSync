rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    function isUserInCompany(companyId) {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId == companyId;
    }

    function isCompanyAdmin(companyId) {
      let userRole = getUserRole(request.auth.uid);
      return isUserInCompany(companyId) && (userRole == 'admin' || userRole == 'superAdmin');
    }
    
    function isCompanyStaff(companyId) {
       let userRole = getUserRole(request.auth.uid);
       return isUserInCompany(companyId) && (userRole == 'admin' || userRole == 'superAdmin' || userRole == 'csr');
    }

    // --- Collection Rules ---

    match /users/{userId} {
      allow read: if request.auth.uid == userId || isCompanyAdmin(get(/databases/$(database)/documents/users/$(userId)).data.companyId);
      allow update: if request.auth.uid == userId; // Users can update their own profile (e.g. onboarding status)
      allow create: if isAuthenticated(); // Any authenticated user can create their own user document upon signup
    }

    match /companies/{companyId} {
      allow read: if isUserInCompany(companyId);
      allow create, update: if isCompanyAdmin(companyId);
    }
    
    match /technicians/{technicianId} {
      // Technicians can be read by any member of the same company
      allow read: if isUserInCompany(resource.data.companyId);
      // Only company admins can create, update, or delete technician profiles
      allow create, update, delete: if isCompanyAdmin(request.resource.data.companyId);
    }
    
    match /jobs/{jobId} {
      allow read: if isUserInCompany(resource.data.companyId);
      allow create: if isCompanyStaff(request.resource.data.companyId);
      // Admins/CSRs can update any job. Technicians can update jobs assigned to them.
      allow update: if isCompanyStaff(resource.data.companyId) || (isUserInCompany(resource.data.companyId) && request.auth.uid == resource.data.assignedTechnicianId);
      allow delete: if isCompanyAdmin(resource.data.companyId);
    }

    match /contracts/{contractId} {
      allow read: if isUserInCompany(resource.data.companyId);
      // Admins and CSRs can manage contracts
      allow create, update, delete: if isCompanyStaff(request.resource.data.companyId);
    }

    match /skills/{skillId} {
       allow read: if isUserInCompany(resource.data.companyId);
       // Only admins can manage the skills library
       allow create, delete: if isCompanyAdmin(request.resource.data.companyId);
    }

    match /parts/{partId} {
       allow read: if isUserInCompany(resource.data.companyId);
       // Only admins can manage the parts library
       allow create, delete: if isCompanyAdmin(request.resource.data.companyId);
    }

    match /equipment/{equipmentId} {
      allow read: if isUserInCompany(resource.data.companyId);
      // Admins and CSRs can add new equipment for a customer
      allow create: if isCompanyStaff(request.resource.data.companyId);
    }

    match /chatMessages/{messageId} {
      // Any authenticated user within the company can read or create chat messages
      allow read, create: if isUserInCompany(request.resource.data.companyId);
    }

    match /profileChangeRequests/{requestId} {
      // A technician can create a request for themselves
      allow create: if isUserInCompany(request.resource.data.companyId) && request.auth.uid == request.resource.data.technicianId;
      // Admins can read and update (approve/reject) requests
      allow read, update: if isCompanyAdmin(resource.data.companyId);
    }
  }
}
