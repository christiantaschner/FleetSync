
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helferfunktionen (OPTIMIERT: Nutzen Custom Claims) ---

    // Prüft, ob der Benutzer authentifiziert ist.
    function isSignedIn() {
      return request.auth != null;
    }

    // Prüft, ob der Benutzer der Eigentümer des Dokuments ist.
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Holt die companyId aus den Custom Claims des Authentifizierungstokens.
    function getCompanyIdFromToken() {
      return request.auth.token.companyid;
    }

    // Holt die Rolle aus den Custom Claims des Authentifizierungstokens.
    function getRoleFromToken() {
      return request.auth.token.role;
    }

    // Prüft, ob der Benutzer ein Super-Admin ist.
    function isSuperAdmin() {
      return isSignedIn() && getRoleFromToken() == 'superAdmin';
    }

    // Prüft, ob der Benutzer ein Admin der angegebenen Firma ist (oder ein Super-Admin).
    function isCompanyAdmin(targetCompanyId) {
      return isSignedIn() &&
             (getRoleFromToken() == 'admin' || isSuperAdmin()) &&
             getCompanyIdFromToken() == targetCompanyId;
    }

    // Prüft, ob der Benutzer ein Mitglied der angegebenen Firma ist.
    function isCompanyMember(targetCompanyId) {
      return isSignedIn() && getCompanyIdFromToken() == targetCompanyId;
    }
    
    // --- Sammlungsregeln ---

    // Regeln für die 'users' Collection
    match /users/{userId} {
      // READ:
      // - Ein Benutzer kann sein eigenes Profil lesen.
      // - Ein Super-Admin kann jedes Profil lesen.
      // - Ein Firmen-Admin kann Profile von Benutzern in seiner eigenen Firma lesen.
      allow get: if isOwner(userId) || isSuperAdmin() || (isCompanyAdmin(resource.data.companyId) && getCompanyIdFromToken() == resource.data.companyId);

      // CREATE:
      // - Jeder authentifizierte Benutzer kann sein eigenes Profil erstellen (uid muss übereinstimmen).
      // - `companyId` und `role` dürfen bei der Erstellung nicht vom Benutzer selbst gesetzt werden, es sei denn, er ist bereits Admin DIESER Firma (unwahrscheinlicher Fall, aber sicher).
      allow create: if isOwner(userId) && request.resource.data.uid == userId
                    && (request.resource.data.companyId == null || isCompanyAdmin(request.resource.data.companyId))
                    && (request.resource.data.role == null || isCompanyAdmin(request.resource.data.companyId))
                    || isSuperAdmin();

      // UPDATE:
      // - Ein Benutzer kann sein eigenes Profil aktualisieren, aber NICHT sensible Felder (companyId, role, uid, email).
      // - Ein Firmen-Admin kann Profile von Benutzern in seiner eigenen Firma aktualisieren (alle Felder).
      // - Ein Super-Admin kann jedes Profil aktualisieren.
      allow update: if (isOwner(userId) &&
                        request.resource.data.uid == resource.data.uid &&
                        request.resource.data.email == resource.data.email &&
                        request.resource.data.companyId == resource.data.companyId &&
                        request.resource.data.role == resource.data.role)
                      || isSuperAdmin()
                      || (isCompanyAdmin(resource.data.companyId) && getCompanyIdFromToken() == resource.data.companyId);

      // LIST:
      // - Admins und Super-Admins können Benutzer listen, aber NUR gefiltert nach ihrer eigenen companyId.
      // - Die `request.query.where` Prüfung erzwingt, dass der Client die korrekte `where("companyId", "==", ...)` Klausel verwendet.
      allow list: if isSuperAdmin() || (getRoleFromToken() == 'admin' && request.query.where.companyId == getCompanyIdFromToken());
    }

    // Regeln für die 'companies' Collection
    match /companies/{companyId} {
      allow read: if isCompanyMember(companyId) || isSuperAdmin();
      allow create, update: if isCompanyAdmin(companyId) || isSuperAdmin();
      allow delete: if false; // Löschen von Firmen sollte nur über eine Backend-Funktion erfolgen.
    }
    
    // Generische Regel für alle firmenspezifischen Dokumente
    function isCompanyResource(collectionName) {
      return collectionName in ['jobs', 'technicians', 'skills', 'parts', 'contracts', 'equipment', 'profileChangeRequests', 'chatMessages'];
    }

    match /{collection}/{docId}
      // Wenden Sie diese Regel nur auf die entsprechenden Sammlungen an.
      if isCompanyResource(collection) {

        // READ (get, list):
        // Jeder, dessen Token-companyId mit der companyId des Dokuments übereinstimmt, kann lesen.
        allow read: if isSignedIn() && (isCompanyMember(resource.data.companyId) || isSuperAdmin());

        // WRITE (create, update, delete):
        // Nur Mitglieder der Firma des Dokuments können schreiben.
        allow write: if isSignedIn() && isCompanyMember(request.resource.data.companyId);

        // --- Spezifischere Schreibregeln innerhalb von 'allow write' ---
        
        // CREATE:
        // - Die companyId des neuen Dokuments muss mit der des Benutzers übereinstimmen.
        // - Rolle muss admin, csr, superAdmin oder ein Techniker sein, der ein 'profileChangeRequest' erstellt.
        allow create: if request.resource.data.companyId == getCompanyIdFromToken() &&
                         (getRoleFromToken() in ['admin', 'csr', 'superAdmin'] ||
                          (collection == 'profileChangeRequests' && getRoleFromToken() == 'technician' && request.resource.data.technicianId == request.auth.uid) ||
                          (collection == 'chatMessages')); // Alle Mitglieder können chatten

        // UPDATE:
        // - Die companyId darf nicht geändert werden.
        // - Admins/CSRs/SuperAdmins können die meisten Dinge aktualisieren.
        // - Techniker dürfen nur Jobs aktualisieren, die ihnen zugewiesen sind.
        allow update: if request.resource.data.companyId == resource.data.companyId &&
                         (getRoleFromToken() in ['admin', 'csr', 'superAdmin'] ||
                          (collection == 'jobs' && getRoleFromToken() == 'technician' && resource.data.assignedTechnicianId == request.auth.uid));

        // DELETE:
        // - Nur Admins und SuperAdmins können Dokumente löschen.
        allow delete: if getRoleFromToken() in ['admin', 'superAdmin'];
    }
  }
}
