rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ========================
    // Helper Functions
    // ========================
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function getUserRole() {
      return getUserData(request.auth.uid).role;
    }

    function isUserInCompany(companyId) {
      // Check if user is signed in and has a companyId that matches.
      // Use this in rules where the user document is guaranteed to exist.
      return isSignedIn() && getUserData(request.auth.uid).companyId == companyId;
    }

    function isCompanyAdmin(companyId) {
        return isUserInCompany(companyId) && getUserRole() == 'admin';
    }

    function isCompanyCsr(companyId) {
        return isUserInCompany(companyId) && getUserRole() == 'csr';
    }

    function isCompanyTechnician(companyId) {
        return isUserInCompany(companyId) && getUserRole() == 'technician';
    }


    // ========================
    // User Profile Rules
    // ========================
    match /users/{userId} {
      // A user can create their own document (e.g., during signup).
      allow create: if isUser(userId);
      
      // A user can read their own profile.
      // An admin can read profiles of users within their company.
      allow read: if isUser(userId) || isCompanyAdmin(getUserData(userId).companyId);
      
      // A user can update their own profile during onboarding.
      // An admin can update any user profile in their company.
      // The resource.data refers to the document state *after* the update.
      allow update: if (isUser(userId) && request.resource.data.onboardingStatus == 'completed') || isCompanyAdmin(resource.data.companyId);
    }

    // ========================
    // Company Data Rules
    // ========================
    match /companies/{companyId} {
        // The user creating the company must be the owner specified in the document.
        allow create: if isUser(request.resource.data.ownerId);
        
        // Any authenticated user belonging to the company can read its details.
        allow read: if isUserInCompany(companyId);
        
        // Only admins of the company can update its settings.
        allow update: if isCompanyAdmin(companyId);
    }

    // ========================
    // Core App Data Rules
    // ========================
    
    // Skills Library
    match /skills/{skillId} {
        // Any user in the company can read the skills list.
        allow read: if isUserInCompany(get(/databases/$(database)/documents/skills/$(skillId)).data.companyId);
        // Only admins can create, update, or delete skills.
        allow write: if isCompanyAdmin(request.resource.data.companyId);
    }

    // Parts Library
    match /parts/{partId} {
        // Any user in the company can read the parts list.
        allow read: if isUserInCompany(get(/databases/$(database)/documents/parts/$(partId)).data.companyId);
        // Only admins can create, update, or delete parts.
        allow write: if isCompanyAdmin(request.resource.data.companyId);
    }

    // Technicians
    match /technicians/{techId} {
        // Any user in the company can read technician data.
        allow read: if isUserInCompany(resource.data.companyId);
        // Admins can create, update, and delete technicians.
        allow write: if isCompanyAdmin(request.resource.data.companyId);
    }
    
    // Jobs
    match /jobs/{jobId} {
        // Any user in the company can read job data.
        allow read: if isUserInCompany(resource.data.companyId);

        // Admins and CSRs can create jobs.
        allow create: if isCompanyAdmin(request.resource.data.companyId) || isCompanyCsr(request.resource.data.companyId);
        
        // Admins can update any job. Technicians can update their own assigned jobs.
        allow update: if isCompanyAdmin(resource.data.companyId) 
                      || (isCompanyTechnician(resource.data.companyId) && request.auth.uid == resource.data.assignedTechnicianId);
    }
    
    // Profile Change Requests
    match /profileChangeRequests/{requestId} {
        // Admins can read and update requests in their company.
        allow read, update: if isCompanyAdmin(resource.data.companyId);
        // Technicians can create requests for themselves.
        allow create: if isCompanyTechnician(request.resource.data.companyId) && request.auth.uid == request.resource.data.technicianId;
    }

    // Contracts
    match /contracts/{contractId} {
        // Admins can manage contracts.
        allow write: if isCompanyAdmin(request.resource.data.companyId);
        // Any user in the company can read contracts.
        allow read: if isUserInCompany(resource.data.companyId);
    }

    // Equipment
    match /equipment/{equipmentId} {
        // Admins can manage equipment.
        allow write: if isCompanyAdmin(request.resource.data.companyId);
        // Any user in the company can read equipment records.
        allow read: if isUserInCompany(resource.data.companyId);
    }
    
    // Chat Messages
    match /chatMessages/{messageId} {
        // Any user in the company can read or create chat messages.
        // For more security, this could be restricted to only participants of the chat (e.g., sender, receiver, and admin).
        allow read, create: if isUserInCompany(request.resource.data.companyId);
    }
  }
}