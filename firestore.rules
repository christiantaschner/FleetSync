rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isSuperAdmin() {
      // Check if the user is authenticated and their role is 'super_admin'.
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'super_admin';
    }
    
    function getUserData() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function isCompanyAdmin(companyId) {
      let userData = getUserData();
      return userData.companyId == companyId && userData.role == 'admin';
    }
    
    function isCompanyMember(companyId) {
       return getUserData().companyId == companyId;
    }

    // --- Collection Rules ---

    // USERS: Users can manage their own profile. Admins can read users in their company.
    match /users/{userId} {
      allow read, write: if request.auth.uid == userId || isSuperAdmin();
      allow get: if isCompanyMember(get(/databases/$(database)/documents/users/$(userId)).data.companyId);
    }

    // COMPANIES: Members can read, admins can update.
    match /companies/{companyId} {
      allow get: if isCompanyMember(companyId) || isSuperAdmin();
      allow update: if isCompanyAdmin(companyId) || isSuperAdmin();
      allow create: if isSuperAdmin(); // Or based on your app's logic for company creation
    }

    // JOBS: Most permissive access for super admins, then role-based access.
    match /jobs/{jobId} {
      function getJobData() {
        return get(/databases/$(database)/documents/jobs/$(jobId)).data;
      }
      
      // Admins and Super Admins have broad permissions on jobs within the correct company.
      // DELETE rule is the key fix here.
      allow read, create, update, delete: if isSuperAdmin() || isCompanyAdmin(request.method == 'create' ? request.resource.data.companyId : getJobData().companyId);

      // Allow any company member to read.
      allow get, list: if isCompanyMember(getJobData().companyId);
      
      // Allow assigned technicians to update their job.
      allow update: if request.auth.uid == getJobData().assignedTechnicianId;
    }
    
    // TECHNICIANS: Read by company, write by admin/self.
    match /technicians/{techId} {
        function getTechData() {
            return get(/databases/$(database)/documents/technicians/$(techId)).data;
        }

        allow read: if isCompanyMember(getTechData().companyId) || isSuperAdmin();
        allow create: if isCompanyAdmin(request.resource.data.companyId) || isSuperAdmin();
        allow update: if request.auth.uid == techId || isCompanyAdmin(getTechData().companyId) || isSuperAdmin();
        allow delete: if isCompanyAdmin(getTechData().companyId) || isSuperAdmin();
    }

    // OTHER COLLECTIONS: General rules for company-scoped data.
    match /contracts/{docId} | /skills/{docId} | /parts/{docId} {
        function getDocData() { return get(/databases/$(database)/documents/{collection}/$(docId)).data; }
        allow read, write: if isCompanyAdmin(request.method == 'create' ? request.resource.data.companyId : getDocData().companyId) || isSuperAdmin();
    }
    
    match /equipment/{docId} {
        function getDocData() { return get(/databases/$(database)/documents/equipment/$(docId)).data; }
        allow read, write: if isCompanyMember(request.method == 'create' ? request.resource.data.companyId : getDocData().companyId) || isSuperAdmin();
    }
    
    match /profileChangeRequests/{reqId} {
        function getReqData() { return get(/databases/$(database)/documents/profileChangeRequests/$(reqId)).data; }
        function isRequestOwner() { return request.auth.uid == (request.method == 'create' ? request.resource.data.technicianId : getReqData().technicianId); }
        function reqCompanyId() { return (request.method == 'create' ? request.resource.data.companyId : getReqData().companyId); }

        allow read, write: if isRequestOwner() || isCompanyAdmin(reqCompanyId()) || isSuperAdmin();
    }

    match /chatMessages/{msgId} {
        function getMsgData() { return get(/databases/$(database)/documents/chatMessages/$(msgId)).data; }
        allow read, write: if isCompanyMember(request.method == 'create' ? request.resource.data.companyId : getMsgData().companyId) || isSuperAdmin();
    }
  }
}
