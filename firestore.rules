
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }
    
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isCompanyMember(companyId) {
      return isSignedIn() && getUserData(request.auth.uid).companyId == companyId;
    }

    function isCompanyAdmin(companyId) {
      let userData = getUserData(request.auth.uid);
      return isCompanyMember(companyId) && (userData.role == 'admin' || userData.role == 'superAdmin');
    }

    function isCompanyCsr(companyId) {
      let userData = getUserData(request.auth.uid);
      return isCompanyMember(companyId) && userData.role == 'csr';
    }
    
    function isDispatcher(companyId) {
        return isCompanyAdmin(companyId) || isCompanyCsr(companyId);
    }


    // --- Collection Rules ---
    match /users/{userId} {
      allow read, update: if isUser(userId) || isCompanyAdmin(resource.data.companyId);
      allow create: if isSignedIn();
    }

    match /companies/{companyId} {
      allow read: if isCompanyMember(companyId);
      allow update: if isCompanyAdmin(companyId);
      allow create: if isUser(request.resource.data.ownerId);
    }

    match /technicians/{technicianId} {
        allow read: if isCompanyMember(resource.data.companyId);
        allow create, delete: if isCompanyAdmin(request.resource.data.companyId);
        allow update: if isCompanyAdmin(resource.data.companyId) || isUser(technicianId);
    }
    
    match /jobs/{jobId} {
        allow read: if isCompanyMember(resource.data.companyId);
        allow create: if isDispatcher(request.resource.data.companyId);
        allow update: if isDispatcher(resource.data.companyId) || isUser(resource.data.assignedTechnicianId);
        allow delete: if isCompanyAdmin(resource.data.companyId);
    }

    match /profileChangeRequests/{requestId} {
        allow create: if isUser(request.resource.data.technicianId);
        allow read: if isUser(resource.data.technicianId) || isCompanyAdmin(resource.data.companyId);
        allow update: if isCompanyAdmin(resource.data.companyId);
    }
    
    match /chatMessages/{messageId} {
        function isChatParticipant() {
            let job = get(/databases/$(database)/documents/jobs/$(request.resource.data.jobId)).data;
            return isUser(job.assignedTechnicianId) || isDispatcher(job.companyId);
        }
        
        allow read, create: if isCompanyMember(request.resource.data.companyId) && isChatParticipant();
        allow update, delete: if false; // immutable
    }

    match /contracts/{contractId} {
        allow read, create, update, delete: if isDispatcher(request.resource.data.companyId);
    }
    
    match /equipment/{equipmentId} {
        allow read: if isCompanyMember(resource.data.companyId);
        allow create, update, delete: if isDispatcher(request.resource.data.companyId);
    }
    
    match /skills/{skillId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isCompanyAdmin(request.resource.data.companyId);
    }

    match /parts/{partId} {
        allow read: if isSignedIn();
        allow create, update, delete: if isCompanyAdmin(request.resource.data.companyId);
    }
  }
}
