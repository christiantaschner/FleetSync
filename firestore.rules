
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin or superAdmin
    function isAdmin() {
      return request.auth.token.role == 'admin' || request.auth.token.role == 'superAdmin';
    }

    // Helper function to check if the user belongs to the company that owns the document
    function isMemberOfCompany(companyId) {
      return request.auth.token.companyId == companyId;
    }

    // Helper function to get incoming data
    function incomingData() {
      return request.resource.data;
    }

    // Helper function to get existing data
    function existingData() {
      return resource.data;
    }

    // --- Company Documents ---
    // Companies can be read by their members.
    // Only the owner can update the company details.
    match /companies/{companyId} {
      allow read: if isMemberOfCompany(companyId);
      allow update: if request.auth.uid == resource.data.ownerId;
      // Disallow client-side creation/deletion of companies for security.
      allow create, delete: if false;
    }

    // --- User Profiles ---
    // Users can read and update their own profile.
    // Admins can read any profile within their own company.
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId;
      allow get: if isMemberOfCompany(resource.data.companyId) && isAdmin();
      // Disallow client-side creation/deletion of user profiles.
      allow create, delete: if false;
    }
    
    // --- Invitations ---
    // Users can read invitations for their own email address.
    // Admins can create and read invites for their own company.
    match /invitations/{inviteId} {
        allow read: if incomingData().email == request.auth.token.email;
        allow create: if isMemberOfCompany(incomingData().companyId) && isAdmin();
        allow list: if isMemberOfCompany(request.query.companyId) && isAdmin();
    }
    
    // --- Artifacts (App-Specific Data) ---
    // This rule applies to all collections within a specific app's data partition.
    match /artifacts/{appId}/public/data/{collection}/{documentId} {
      
      // --- Jobs ---
      // Admins and CSRs can create/update any job in their company.
      // Technicians can only update jobs they are assigned to.
      // Any company member can read jobs.
      match /jobs/{jobId} {
          allow read: if isMemberOfCompany(resource.data.companyId);
          allow create: if (isAdmin() || request.auth.token.role == 'csr') && isMemberOfCompany(incomingData().companyId);
          allow update: if 
              // Admin can update any field except protected ones
              (isAdmin() && isMemberOfCompany(existingData().companyId)) ||
              // Technician can update their assigned job
              (request.auth.uid == existingData().assignedTechnicianId && isMemberOfCompany(existingData().companyId));
          
           // Add specific rules for sensitive fields `profitScore` and `dispatchLocked`
          allow update: if 
              (isAdmin() && isMemberOfCompany(existingData().companyId))
              // Technicians can update, but NOT the protected fields
              || (request.auth.uid == existingData().assignedTechnicianId 
                  && isMemberOfCompany(existingData().companyId)
                  && !('profitScore' in incomingData())
                  && !('dispatchLocked' in incomingData()));

          allow delete: if isAdmin() && isMemberOfCompany(resource.data.companyId);
      }

      // --- Technicians ---
      // Admins can manage technicians in their company.
      // Technicians can read their own profile details from this collection.
      // All company members can list/read technicians.
      match /technicians/{techId} {
        allow read: if isMemberOfCompany(resource.data.companyId);
        allow create, update: if isAdmin() && isMemberOfCompany(incomingData().companyId);
        allow delete: if isAdmin() && isMemberOfCompany(resource.data.companyId);
      }

      // --- Contracts, Customers, Equipment, Skills, Parts ---
      // Generally, these are managed by Admins.
      // All company members can read them.
      match /contracts/{docId} {
        allow read: if isMemberOfCompany(resource.data.companyId);
        allow create, update, delete: if isAdmin() && isMemberOfCompany(incomingData().companyId);
      }
      match /customers/{docId} {
        allow read: if isMemberOfCompany(resource.data.companyId);
        allow create, update, delete: if isAdmin() && isMemberOfCompany(incomingData().companyId);
      }
      match /equipment/{docId} {
        allow read: if isMemberOfCompany(resource.data.companyId);
        allow create, update, delete: if isAdmin() && isMemberOfCompany(incomingData().companyId);
      }
      match /skills/{docId} {
        allow read: if isMemberOfCompany(resource.data.companyId);
        allow create, update, delete: if isAdmin() && isMemberOfCompany(incomingData().companyId);
      }
      match /parts/{docId} {
        allow read: if isMemberOfCompany(resource.data.companyId);
        allow create, update, delete: if isAdmin() && isMemberOfCompany(incomingData().companyId);
      }
      
      // --- Profile Change Requests ---
      // Technicians can create requests for their own profile.
      // Admins can read/update/delete any request in their company.
       match /profileChangeRequests/{reqId} {
        allow create: if request.auth.uid == incomingData().technicianId && isMemberOfCompany(incomingData().companyId);
        allow read, update, delete: if isAdmin() && isMemberOfCompany(resource.data.companyId);
      }
      
      // --- Chat Messages ---
      // Only the sender or receiver of a message can read it.
      // Only the sender can create a message.
       match /chatMessages/{msgId} {
        allow read: if isMemberOfCompany(resource.data.companyId) && (request.auth.uid == resource.data.senderId || request.auth.uid == resource.data.receiverId || isAdmin());
        allow create: if isMemberOfCompany(incomingData().companyId) && request.auth.uid == incomingData().senderId;
        allow update, delete: if false;
      }
    }
  }
}
