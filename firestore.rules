
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isSuperAdmin(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role == 'super_admin';
    }
    
    function isCompanyAdmin(userId, companyId) {
      let user = get(/databases/$(database)/documents/users/$(userId)).data;
      return user.role == 'admin' && user.companyId == companyId;
    }
    
    function isCompanyCsr(userId, companyId) {
      let user = get(/databases/$(database)/documents/users/$(userId)).data;
      return user.role == 'csr' && user.companyId == companyId;
    }

    function isCompanyTechnician(userId, companyId) {
      let user = get(/databases/$(database)/documents/users/$(userId)).data;
      return user.role == 'technician' && user.companyId == companyId;
    }
    
    function isCompanyMember(userId, companyId) {
      return isCompanyAdmin(userId, companyId) || isCompanyCsr(userId, companyId) || isCompanyTechnician(userId, companyId);
    }
    
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
        return request.auth.uid == userId;
    }
    
    // --- Collection Rules ---

    // USERS: Users can read/update their own profile. Admins can manage users within their company.
    match /users/{userId} {
      allow read, update: if isOwner(userId) || isSuperAdmin(request.auth.uid);
      allow create: if isSignedIn();
      allow list: if isSuperAdmin(request.auth.uid) || isCompanyAdmin(request.auth.uid, resource.data.companyId);
    }

    // COMPANIES: Admins/CSRs/Technicians can read their own company data. Only admins can update it.
    match /companies/{companyId} {
      allow read: if isSuperAdmin(request.auth.uid) || isCompanyMember(request.auth.uid, companyId);
      allow update: if isSuperAdmin(request.auth.uid) || isCompanyAdmin(request.auth.uid, companyId);
    }
    
    // JOBS: Company members can manage jobs. Technicians have more specific rules.
    match /jobs/{jobId} {
        function isAssignedTechnician(jobData) {
            return request.auth.uid == jobData.assignedTechnicianId;
        }

        allow read, list: if isSuperAdmin(request.auth.uid) || isCompanyMember(request.auth.uid, resource.data.companyId);
        allow create: if isSuperAdmin(request.auth.uid) || isCompanyAdmin(request.auth.uid, request.resource.data.companyId) || isCompanyCsr(request.auth.uid, request.resource.data.companyId);
        
        allow update: if (isSuperAdmin(request.auth.uid) || isCompanyAdmin(request.auth.uid, resource.data.companyId) || isCompanyCsr(request.auth.uid, resource.data.companyId)) ||
                         (isAssignedTechnician(resource.data) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt', 'notes', 'photos', 'customerSignatureUrl', 'customerSignatureTimestamp', 'customerSatisfactionScore', 'isFirstTimeFix', 'reasonForFollowUp', 'breaks', 'checklistResults', 'completedAt', 'inProgressAt', 'enRouteAt']));

        allow delete: if isSuperAdmin(request.auth.uid) || isCompanyAdmin(request.auth.uid, resource.data.companyId);
    }

    // TECHNICIANS: Company members can read data. Admins can create/update. Technicians can update limited fields.
    match /technicians/{docId} {
        allow read, list: if isSuperAdmin(request.auth.uid) || isCompanyMember(request.auth.uid, resource.data.companyId);
        allow create: if isSuperAdmin(request.auth.uid) || isCompanyAdmin(request.auth.uid, request.resource.data.companyId);
        allow update: if isSuperAdmin(request.auth.uid) || isCompanyAdmin(request.auth.uid, resource.data.companyId) || (isOwner(docId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['location']));
        allow delete: if isSuperAdmin(request.auth.uid) || isCompanyAdmin(request.auth.uid, resource.data.companyId);
    }
    
    // SKILLS: Read-only for company members, write for admins.
    match /skills/{skillId} {
        allow read, list: if isSuperAdmin(request.auth.uid) || isCompanyMember(request.auth.uid, resource.data.companyId);
        allow create: if isSuperAdmin(request.auth.uid) || isCompanyAdmin(request.auth.uid, request.resource.data.companyId);
        allow delete: if isSuperAdmin(request.auth.uid) || isCompanyAdmin(request.auth.uid, resource.data.companyId);
    }
    
    // PARTS: Read-only for company members, write for admins.
    match /parts/{partId} {
        allow read, list: if isSuperAdmin(request.auth.uid) || isCompanyMember(request.auth.uid, resource.data.companyId);
        allow create: if isSuperAdmin(request.auth.uid) || isCompanyAdmin(request.auth.uid, request.resource.data.companyId);
        allow delete: if isSuperAdmin(request.auth.uid) || isCompanyAdmin(request.auth.uid, resource.data.companyId);
    }
    
    // PROFILE CHANGE REQUESTS: Technicians can create, Admins can manage.
    match /profileChangeRequests/{requestId} {
      allow create: if isOwner(request.resource.data.technicianId);
      allow read, list, update: if isSuperAdmin(request.auth.uid) || isCompanyAdmin(request.auth.uid, resource.data.companyId);
    }
    
    // CHAT MESSAGES: Involved parties can read/write.
    match /chatMessages/{messageId} {
        allow read, create: if isSuperAdmin(request.auth.uid) || isCompanyMember(request.auth.uid, resource.data.companyId);
    }
    
    // CONTRACTS:
    match /contracts/{contractId} {
      allow read, list: if isSuperAdmin(request.auth.uid) || isCompanyMember(request.auth.uid, resource.data.companyId);
      allow create, update: if isSuperAdmin(request.auth.uid) || isCompanyAdmin(request.auth.uid, request.resource.data.companyId);
      allow delete: if isSuperAdmin(request.auth.uid) || isCompanyAdmin(request.auth.uid, resource.data.companyId);
    }
    
    // EQUIPMENT:
    match /equipment/{equipmentId} {
      allow read, list: if isSuperAdmin(request.auth.uid) || isCompanyMember(request.auth.uid, resource.data.companyId);
      allow create, update: if isSuperAdmin(request.auth.uid) || isCompanyAdmin(request.auth.uid, request.resource.data.companyId) || isCompanyCsr(request.auth.uid, request.resource.data.companyId);
      allow delete: if isSuperAdmin(request.auth.uid) || isCompanyAdmin(request.auth.uid, resource.data.companyId);
    }
  }
}
