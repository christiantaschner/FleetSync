
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isUserInCompany(companyId) {
      return request.auth != null && getUserData(request.auth.uid).companyId == companyId;
    }
    
    function isUserAdmin(companyId) {
        return isUserInCompany(companyId) && getUserData(request.auth.uid).role == 'admin';
    }

    // Rules for the 'users' Collection
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || isUserAdmin(get(/databases/$(database)/documents/users/$(userId)).data.companyId));
      
      allow create: if request.auth != null && request.auth.uid == userId;

      // Prevent users from escalating their own privileges
      allow update: if request.auth != null &&
                       (request.auth.uid == userId &&
                       request.resource.data.uid == resource.data.uid &&
                       request.resource.data.email == resource.data.email &&
                       request.resource.data.companyId == resource.data.companyId &&
                       request.resource.data.role == resource.data.role);

      allow delete: if false;
    }

    // Rules for company-specific data
    match /companies/{companyId} {
      allow read: if isUserInCompany(companyId);
      allow write: if isUserAdmin(companyId);
    }

    match /jobs/{jobId} {
        allow read, write: if isUserInCompany(get(/databases/$(database)/documents/jobs/$(jobId)).data.companyId);
    }
    
    match /technicians/{techId} {
        allow read: if isUserAdmin(get(/databases/$(database)/documents/technicians/$(techId)).data.companyId) || request.auth.uid == techId;
        allow write: if isUserAdmin(get(/databases/$(database)/documents/technicians/$(techId)).data.companyId);
    }
    
    match /contracts/{contractId} {
        allow read, write: if isUserInCompany(get(/databases/$(database)/documents/contracts/$(contractId)).data.companyId);
    }
    
    match /equipment/{equipmentId} {
        allow read, write: if isUserInCompany(get(/databases/$(database)/documents/equipment/$(equipmentId)).data.companyId);
    }
    
    match /skills/{skillId} {
        allow read, write: if isUserInCompany(get(/databases/$(database)/documents/skills/$(skillId)).data.companyId);
    }
    
    match /parts/{partId} {
        allow read, write: if isUserInCompany(get(/databases/$(database)/documents/parts/$(partId)).data.companyId);
    }
    
    match /profileChangeRequests/{requestId} {
        allow read: if isUserInCompany(get(/databases/$(database)/documents/profileChangeRequests/$(requestId)).data.companyId) && 
                     (isUserAdmin(get(/databases/$(database)/documents/profileChangeRequests/$(requestId)).data.companyId) || request.auth.uid == get(/databases/$(database)/documents/profileChangeRequests/$(requestId)).data.technicianId);
        
        allow write: if isUserAdmin(request.resource.data.companyId) || 
                      (request.method == 'create' && isUserInCompany(request.resource.data.companyId) && request.auth.uid == request.resource.data.technicianId);
    }

    match /chatMessages/{messageId} {
      allow read: if isUserInCompany(get(/databases/$(database)/documents/chatMessages/$(messageId)).data.companyId);
      allow write: if isUserInCompany(request.resource.data.companyId);
    }
  }
}
