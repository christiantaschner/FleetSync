
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin of the requested company.
    // A superAdmin is considered an admin of any company.
    function isCompanyAdmin(companyId) {
      let authUser = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return authUser.role == 'superAdmin' || (authUser.role == 'admin' && authUser.companyId == companyId);
    }

    match /users/{userId} {
      // A user can always read/write their own document.
      allow write: if request.auth.uid == userId;

      // An admin can also read any user document from their own company.
      // This works for `get` and `list` because it checks against the resource's companyId.
      // The client MUST provide a `where('companyId', '==', ...)` clause for list queries to work.
      allow read: if request.auth.uid == userId || isCompanyAdmin(resource.data.companyId);

      // An admin can update roles/company for users in their company.
      // Field-level checks prevent unwanted modifications.
      allow update: if isCompanyAdmin(resource.data.companyId) && request.resource.data.diff(resource.data).affectedKeys().hasAny(['role', 'companyId', 'onboardingStatus']);
    }

    match /companies/{companyId} {
        allow read, update: if isCompanyAdmin(companyId);
        allow create: if request.auth != null;
    }
    
    match /technicians/{technicianId} {
        allow read: if request.auth.uid == technicianId || isCompanyAdmin(resource.data.companyId);
        allow create, update, delete: if isCompanyAdmin(resource.data.companyId);
    }
    
    match /profileChangeRequests/{requestId} {
        allow create: if request.auth.uid == request.resource.data.technicianId;
        allow read, update: if isCompanyAdmin(request.resource.data.companyId);
    }
    
    match /jobs/{jobId} {
        allow read: if isCompanyAdmin(resource.data.companyId) || request.auth.uid == resource.data.assignedTechnicianId;
        allow create, update, delete: if isCompanyAdmin(resource.data.companyId);
        
        allow update: if request.auth.uid == resource.data.assignedTechnicianId 
                      && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt', 'notes', 'photos', 'customerSignatureUrl', 'customerSignatureTimestamp', 'enRouteAt', 'inProgressAt', 'completedAt', 'customerSatisfactionScore', 'isFirstTimeFix', 'reasonForFollowUp', 'breaks']);
    }

    match /skills/{skillId} {
        allow read: if request.auth != null;
        allow create, delete: if isCompanyAdmin(request.resource.data.companyId);
    }
    
     match /parts/{partId} {
        allow read: if request.auth != null;
        allow create, delete: if isCompanyAdmin(request.resource.data.companyId);
    }

    match /contracts/{contractId} {
        allow read, create, update, delete: if isCompanyAdmin(resource.data.companyId);
    }

    match /equipment/{equipmentId} {
      allow read, create, update, delete: if isCompanyAdmin(resource.data.companyId);
    }

    match /chatMessages/{messageId} {
      allow read, create: if isCompanyAdmin(request.resource.data.companyId) || request.auth.uid == request.resource.data.senderId;
    }
  }
}
