
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper Functions
    function isSuperAdmin() {
      let userRole = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
      return userRole == 'super_admin';
    }
    
    function isCompanyAdmin(companyId) {
      let userRole = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
      let userCompanyId = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId;
      return (userRole == 'admin' || isSuperAdmin()) && userCompanyId == companyId;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isMemberOfCompany(companyId) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId == companyId;
    }
    
    function isAnyAdmin() {
      let userRole = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
      return userRole == 'admin' || userRole == 'super_admin';
    }

    match /users/{userId} {
      // An admin can get any user in their own company. A user can get their own profile.
      // resource.data here refers to the document being read from the database.
      allow get: if isOwner(userId) || isCompanyAdmin(resource.data.companyId);
      
      // A user can update their own profile. An admin can update any user in their own company.
      // On write operations, request.resource.data refers to the data being sent.
      allow update: if isOwner(userId) || isCompanyAdmin(request.resource.data.companyId);

      // Only the authenticated user can create their own document.
      allow create: if isOwner(userId);
      
      // Admins can list users. The client query MUST be filtered by companyId for security.
      allow list: if isAnyAdmin();
    }
    
    match /companies/{companyId} {
      allow read, write: if isCompanyAdmin(companyId);
    }
    
    match /skills/{skillId} {
        allow read, list: if isMemberOfCompany(resource.data.companyId);
        allow create, delete: if isCompanyAdmin(request.resource.data.companyId);
    }
    
    match /parts/{partId} {
        allow read, list: if isMemberOfCompany(resource.data.companyId);
        allow create, delete: if isCompanyAdmin(request.resource.data.companyId);
    }

    match /jobs/{jobId} {
      allow read, list: if isMemberOfCompany(resource.data.companyId);
      allow create, update, delete: if isCompanyAdmin(request.resource.data.companyId) || isCompanyAdmin(resource.data.companyId);
    }
    
    match /technicians/{technicianId} {
        allow read, list: if isMemberOfCompany(resource.data.companyId);
        allow create, update, delete: if isCompanyAdmin(request.resource.data.companyId) || isCompanyAdmin(resource.data.companyId);
    }
    
    match /profileChangeRequests/{requestId} {
        allow create: if isOwner(request.resource.data.technicianId);
        allow read, list: if isCompanyAdmin(resource.data.companyId);
        allow update: if isCompanyAdmin(resource.data.companyId);
    }
    
    match /chatMessages/{messageId} {
        allow read, list: if isMemberOfCompany(resource.data.companyId);
        allow create: if isMemberOfCompany(request.resource.data.companyId);
    }
    
    match /contracts/{contractId} {
      allow read, list: if isMemberOfCompany(resource.data.companyId);
      allow create, update, delete: if isCompanyAdmin(request.resource.data.companyId) || isCompanyAdmin(resource.data.companyId);
    }
    
    match /equipment/{equipmentId} {
      allow read, list: if isMemberOfCompany(resource.data.companyId);
      allow create, update, delete: if isCompanyAdmin(request.resource.data.companyId) || isCompanyAdmin(resource.data.companyId);
    }
  }
}
