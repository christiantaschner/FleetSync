rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helferfunktionen (OPTIMIERT: Nutzen Custom Claims) ---

    // Prüft, ob der Benutzer authentifiziert ist.
    function isSignedIn() {
      return request.auth != null;
    }

    // Prüft, ob der Benutzer der Eigentümer des Dokuments ist.
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Holt die companyId aus den Custom Claims des Authentifizierungstokens.
    // Dies ist der performanteste Weg.
    function getCompanyIdFromToken() {
      return request.auth.token.companyid;
    }

    // Holt die Rolle aus den Custom Claims des Authentifizierungstokens.
    // Dies ist der performanteste Weg.
    function getRoleFromToken() {
      return request.auth.token.role;
    }

    // Prüft, ob der Benutzer ein Super-Admin ist.
    function isSuperAdmin() {
      return isSignedIn() && getRoleFromToken() == 'superAdmin';
    }

    // Prüft, ob der Benutzer ein Admin der angegebenen Firma ist (oder ein Super-Admin).
    function isCompanyAdmin(targetCompanyId) {
      return isSignedIn() &&
             (getRoleFromToken() == 'admin' || isSuperAdmin()) &&
             getCompanyIdFromToken() == targetCompanyId;
    }

    // Prüft, ob der Benutzer ein Mitglied der angegebenen Firma ist.
    function isCompanyMember(targetCompanyId) {
      return isSignedIn() && getCompanyIdFromToken() == targetCompanyId;
    }
    
    function isRole(roleName) {
      return isSignedIn() && getRoleFromToken() == roleName;
    }

    // --- Sammlungsregeln ---

    match /users/{userId} {
      allow get: if isOwner(userId) ||
                     isSuperAdmin() ||
                     (isCompanyAdmin(resource.data.companyId) && getCompanyIdFromToken() == resource.data.companyId);

      allow create: if (isOwner(userId) &&
                       request.resource.data.uid == userId &&
                       (request.resource.data.companyId == null || isCompanyAdmin(request.resource.data.companyId) || isSuperAdmin()) &&
                       (request.resource.data.role == null || isCompanyAdmin(request.resource.data.companyId) || isSuperAdmin()));

      allow update: if (isOwner(userId) &&
                          request.resource.data.uid == resource.data.uid &&
                          request.resource.data.email == resource.data.email &&
                          request.resource.data.companyId == resource.data.companyId &&
                          request.resource.data.role == resource.data.role)
                        || isSuperAdmin()
                        || (isCompanyAdmin(resource.data.companyId) && getCompanyIdFromToken() == resource.data.companyId);

      allow list: if isSuperAdmin() ||
                      (isRole('admin') && request.query.where.companyId == getCompanyIdFromToken());
    }

    match /companies/{companyId} {
      allow read: if isCompanyMember(companyId) || isSuperAdmin();
      allow create, update: if isCompanyAdmin(companyId) || isSuperAdmin();
      allow delete: if isSuperAdmin();
    }
    
    match /skills/{skillId} {
        allow read: if isSignedIn();
        allow create, update, delete: if isCompanyAdmin(request.resource.data.companyId);
    }
    
    match /parts/{partId} {
        allow read: if isSignedIn();
        allow create, update, delete: if isCompanyAdmin(request.resource.data.companyId);
    }
    
    match /jobs/{jobId} {
      allow read, list: if isCompanyMember(resource.data.companyId) || isSuperAdmin();
      allow create: if isCompanyMember(request.resource.data.companyId) && (isRole('admin') || isRole('csr'));
      allow update: if isCompanyMember(resource.data.companyId) && 
                       request.resource.data.companyId == resource.data.companyId &&
                       (isRole('admin') || (isRole('technician') && resource.data.assignedTechnicianId == request.auth.uid));
      allow delete: if isCompanyAdmin(resource.data.companyId);
    }
    
    match /technicians/{technicianId} {
        allow read, list: if isCompanyMember(resource.data.companyId) || isSuperAdmin();
        allow create, update: if isCompanyAdmin(request.resource.data.companyId);
        allow delete: if isCompanyAdmin(resource.data.companyId);
    }
    
    match /contracts/{contractId} {
      allow read, list: if isCompanyMember(resource.data.companyId) || isSuperAdmin();
      allow create: if isCompanyAdmin(request.resource.data.companyId);
      allow update: if isCompanyAdmin(resource.data.companyId) && request.resource.data.companyId == resource.data.companyId;
      allow delete: if isCompanyAdmin(resource.data.companyId);
    }

    match /equipment/{equipmentId} {
      allow read, list: if isCompanyMember(resource.data.companyId) || isSuperAdmin();
      allow create: if isCompanyMember(request.resource.data.companyId) && (isRole('admin') || isRole('csr'));
      allow update, delete: if isCompanyAdmin(resource.data.companyId);
    }

    match /profileChangeRequests/{requestId} {
      allow read, list: if isCompanyMember(resource.data.companyId) || isSuperAdmin();
      allow create: if isCompanyMember(request.resource.data.companyId) && request.resource.data.technicianId == request.auth.uid;
      allow update: if isCompanyAdmin(resource.data.companyId) && request.resource.data.companyId == resource.data.companyId;
      allow delete: if isCompanyAdmin(resource.data.companyId);
    }

    match /chatMessages/{messageId} {
      allow read, list: if isCompanyMember(resource.data.companyId) || isSuperAdmin();
      allow create: if isCompanyMember(request.resource.data.companyId);
      allow update, delete: if false;
    }
  }
}