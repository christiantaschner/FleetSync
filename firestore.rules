rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    // These functions use data from the user's authentication token (custom claims)
    // to avoid costly Firestore document reads within the rules.
    function isSuperAdmin() {
      return request.auth.token.role == 'superAdmin';
    }

    function isCompanyAdmin() {
      return request.auth.token.role == 'admin';
    }

    function isAnyAdmin() {
      return isCompanyAdmin() || isSuperAdmin();
    }
    
    // Checks if the requesting user belongs to the given company.
    function isMemberOfCompany(companyId) {
      return request.auth.token.companyId == companyId;
    }

    // Checks if the requesting user is the owner of the document.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // --- Users Collection Rules ---
    match /users/{userId} {
      // A user can read their own profile. An admin can read profiles of users within their own company.
      // This rule secures 'list' queries by ensuring any document read from the list passes this check.
      allow read: if isOwner(userId) || (isAnyAdmin() && isMemberOfCompany(resource.data.companyId));

      // A user can update their own profile, but is NOT allowed to change their companyId or role.
      // An admin can update any user within their company.
      allow update: if (isOwner(userId) && request.resource.data.companyId == resource.data.companyId && request.resource.data.role == resource.data.role) ||
                       (isAnyAdmin() && isMemberOfCompany(resource.data.companyId));
                       
      // User creation is handled by backend triggers/onboarding, not directly by clients.
      allow create: if false;
      allow delete: if isSuperAdmin();
    }

    // --- Companies Collection Rules ---
    match /companies/{companyId} {
      // Users can only read their own company's document.
      allow read: if isMemberOfCompany(companyId);

      // Only an admin of the company can update it, and they cannot change the ownerId.
      allow update: if isCompanyAdmin() && isMemberOfCompany(companyId) && request.resource.data.ownerId == resource.data.ownerId;
      
      // Company creation is handled by the onboarding server action.
      allow create: if request.auth.uid == request.resource.data.ownerId;
      allow delete: if isSuperAdmin();
    }

    // --- Jobs Collection Rules ---
    match /jobs/{jobId} {
      // Any member of the company can read job data. Secures list calls.
      allow read: if isMemberOfCompany(resource.data.companyId);

      // Admins can create jobs for their company.
      allow create: if isAnyAdmin() && isMemberOfCompany(request.resource.data.companyId);
      
      // Admins can update any job in their company.
      // Technicians can update jobs they are assigned to.
      // The companyId cannot be changed.
      allow update: if (isAnyAdmin() && isMemberOfCompany(resource.data.companyId) || isOwner(resource.data.assignedTechnicianId))
                     && request.resource.data.companyId == resource.data.companyId;

      // Only company admins can delete jobs.
      allow delete: if isCompanyAdmin() && isMemberOfCompany(resource.data.companyId);
    }

    // --- Technicians Collection Rules ---
    match /technicians/{techId} {
      // Any member of the company can read technician data.
      allow read: if isMemberOfCompany(resource.data.companyId);
      
      // Admins can create technicians for their company.
      allow create: if isAnyAdmin() && isMemberOfCompany(request.resource.data.companyId);
      
      // Admins can update any technician in their company. companyId is immutable.
      allow update: if isAnyAdmin() && isMemberOfCompany(resource.data.companyId) && request.resource.data.companyId == resource.data.companyId;
      
      // Only company admins can delete technicians.
      allow delete: if isCompanyAdmin() && isMemberOfCompany(resource.data.companyId);
    }
    
    // --- Skills & Parts are considered public libraries within the app ---
    match /skills/{skillId} {
      allow read: if request.auth != null;
      allow write: if isCompanyAdmin() && isMemberOfCompany(request.resource.data.companyId);
    }
    match /parts/{partId} {
      allow read: if request.auth != null;
      allow write: if isCompanyAdmin() && isMemberOfCompany(request.resource.data.companyId);
    }

    // --- Contracts Collection Rules ---
    match /contracts/{contractId} {
      allow read: if isMemberOfCompany(resource.data.companyId);
      allow create: if isAnyAdmin() && isMemberOfCompany(request.resource.data.companyId);
      allow update: if isAnyAdmin() && isMemberOfCompany(resource.data.companyId) && request.resource.data.companyId == resource.data.companyId;
      allow delete: if isCompanyAdmin() && isMemberOfCompany(resource.data.companyId);
    }

    // --- Equipment Collection Rules ---
    match /equipment/{equipmentId} {
      allow read: if isMemberOfCompany(resource.data.companyId);
      allow create: if isAnyAdmin() && isMemberOfCompany(request.resource.data.companyId);
      allow update: if isAnyAdmin() && isMemberOfCompany(resource.data.companyId) && request.resource.data.companyId == resource.data.companyId;
      allow delete: if isCompanyAdmin() && isMemberOfCompany(resource.data.companyId);
    }

    // --- Profile Change Requests Collection Rules ---
    match /profileChangeRequests/{requestId} {
      allow read: if isMemberOfCompany(resource.data.companyId);
      // A technician can create their own request.
      allow create: if isOwner(request.resource.data.technicianId);
      // An admin can update (approve/reject) the request.
      allow update: if isAnyAdmin() && isMemberOfCompany(resource.data.companyId) && request.resource.data.companyId == resource.data.companyId;
      allow delete: if isSuperAdmin();
    }
    
    // --- Chat Messages Collection Rules ---
    match /chatMessages/{messageId} {
      // Any member of the company can read/write chat messages.
      allow read, write: if isMemberOfCompany(resource.data.companyId) || isMemberOfCompany(request.resource.data.companyId);
    }
  }
}
