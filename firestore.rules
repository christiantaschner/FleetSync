rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user belongs to a specific company
    function isUserInCompany(companyId) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId == companyId;
    }

    // Helper function to check if a user is an admin of a specific company
    function isAdmin(companyId) {
      let userRole = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
      return isUserInCompany(companyId) && (userRole == 'admin' || userRole == 'superAdmin');
    }

    // Users can read/update their own profile, and admins of their company can read it
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId || isAdmin(resource.data.companyId);
      allow create: if request.auth.uid == userId;
    }

    // Company documents can be read by their members and written by their admins
    match /companies/{companyId} {
      allow read: if isUserInCompany(companyId);
      allow write: if isAdmin(companyId);
    }

    // -- App Data Rules --

    // Jobs can be read by company members, and managed by admins or the assigned technician.
    match /jobs/{jobId} {
      allow read: if isUserInCompany(resource.data.companyId);
      allow create: if isAdmin(request.resource.data.companyId) || 
                      (isUserInCompany(request.resource.data.companyId) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'csr');
      allow update: if isAdmin(resource.data.companyId) || request.auth.uid == resource.data.assignedTechnicianId;
      allow delete: if isAdmin(resource.data.companyId);
    }

    // Technicians can be read by company members, and managed by admins.
    match /technicians/{techId} {
        allow read: if isUserInCompany(resource.data.companyId);
        // A technician can update their own location
        allow update: if (isAdmin(resource.data.companyId)) || 
                        (request.auth.uid == techId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['location']));
        allow create, delete: if isAdmin(request.resource.data.companyId);
    }
    
    // Change requests can be created by the tech, and read/updated by admins.
    match /profileChangeRequests/{requestId} {
      allow create: if request.auth.uid == request.resource.data.technicianId;
      allow read, update, delete: if isAdmin(resource.data.companyId);
    }

    // Chat messages can be created by company members, and read by participants or admins.
    match /chatMessages/{messageId} {
        allow create: if isUserInCompany(request.resource.data.companyId);
        allow read: if isUserInCompany(resource.data.companyId) &&
                     (request.auth.uid == resource.data.senderId || isAdmin(resource.data.companyId));
    }

    // General write access for company members on these collections
    match /{collection}/{docId} {
      allow read, write: if request.resource.data.companyId != null && isUserInCompany(request.resource.data.companyId);
    }
  }
}
