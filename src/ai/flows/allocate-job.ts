// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview An AI agent that suggests the most suitable technician for a new job.
 *
 * - allocateJob - A function that suggests the most suitable technician for a new job.
 */

import {ai} from '@/ai/genkit';
import {
  type AllocateJobInput,
  AllocateJobInputSchema,
  type AllocateJobOutput,
  AllocateJobOutputSchema
} from '@/types';

export async function allocateJob(input: AllocateJobInput): Promise<AllocateJobOutput> {
  return allocateJobFlow(input);
}

const prompt = ai.definePrompt({
  name: 'allocateJobPrompt',
  input: {schema: AllocateJobInputSchema},
  output: {schema: AllocateJobOutputSchema},
  prompt: `You are an AI assistant helping dispatchers allocate jobs to field technicians. Your decision must be based on a balance of skill, availability, location, and job priority.

**RULES FOR JOB ASSIGNMENT:**

1.  **High-Priority (Emergency) Jobs:**
    *   Your primary goal is to assign the job immediately to the most suitable technician.
    *   An 'Available' technician who has the required skills is always the top choice. Their other scheduled jobs for later in the day should be ignored; assume the dispatcher will handle rescheduling.
    *   If no skilled technician is 'Available', you MAY suggest interrupting a technician currently on a 'Low' priority job. This is an exception and should only be done if it provides a significant advantage (e.g., they are much closer).
    *   You MUST NOT suggest interrupting a technician who is on a 'Medium' or 'High' priority job.

2.  **Medium & Low-Priority Jobs:**
    *   Prefer 'Available' technicians.
    *   When evaluating a technician, consider their 'currentJobs' list to see if they can realistically accommodate this new job alongside their existing commitments.
    *   If a specific \`scheduledTime\` is provided for the new job, the technician's ability to meet that appointment is a critical factor.

{{#if requiredSkills.length}}
**CRITICAL SKILL REQUIREMENT:** The job explicitly requires the following skills: {{#each requiredSkills}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}. The chosen technician MUST possess ALL of these skills. This is a non-negotiable constraint.
{{/if}}

---

**TASK:**
Given the following job and technician data, suggest the most suitable technician.

**Job Details:**
- Description: {{{jobDescription}}}
- Priority: {{{jobPriority}}}
{{#if scheduledTime}}- Customer Requested Time: {{{scheduledTime}}}{{/if}}

**Technician Data:**
{{#each technicianAvailability}}
- **Technician ID: {{{technicianId}}}**
  - Name: {{{technicianName}}}
  - Available: {{{isAvailable}}}
  - Skills: {{#if skills}}{{#each skills}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}{{else}}None listed{{/if}}
  - Location: (Lat: {{{location.latitude}}}, Lon: {{{location.longitude}}})
  {{#if currentJobs.length}}
  - Current Assigned Jobs:
  {{#each currentJobs}}
    - Job ID: {{{jobId}}}, Priority: {{{priority}}}{{#if scheduledTime}}, Scheduled: {{{scheduledTime}}}{{/if}}
  {{/each}}
  {{/if}}
{{/each}}

---

**OUTPUT:**
Suggest the most suitable technician ID and provide clear reasoning for your choice.
- In your reasoning, refer to technicians by name, not ID.
- If you suggest an interruption, state it clearly in your reasoning.
- If no technician is suitable based on the constraints (especially skills), you MUST return a null value for 'suggestedTechnicianId' and explain why no one could be assigned.
`,
});

const allocateJobFlow = ai.defineFlow(
  {
    name: 'allocateJobFlow',
    inputSchema: AllocateJobInputSchema,
    outputSchema: AllocateJobOutputSchema,
  },
  async input => {
    const { output } = await prompt(input);
    if (!output) {
      return {
        suggestedTechnicianId: null,
        reasoning: "The AI model could not determine a suitable technician based on the provided constraints (e.g., skills, availability).",
      };
    }
    return output;
  }
);
