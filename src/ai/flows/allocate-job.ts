
// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview An AI agent that suggests the most suitable technician for a new job.
 *
 * - allocateJob - A function that suggests the most suitable technician for a new job.
 */

import {ai} from '@/ai/genkit';
import {
  type AllocateJobInput,
  AllocateJobInputSchema,
  type AllocateJobOutput,
  AllocateJobOutputSchema,
  type DispatcherFeedback,
} from '@/types';
import { dbAdmin } from '@/lib/firebase-admin';
import { collection, query, where, orderBy, limit, getDocs, doc, getDoc } from 'firebase/firestore';


export async function allocateJob(input: AllocateJobInput, appId: string): Promise<AllocateJobOutput> {
  // The logic to augment with feedback has been moved to ai-actions.ts
  // This keeps the core flow clean and focused on just the AI call.
  return allocateJobFlow(input);
}

const prompt = ai.definePrompt({
  name: 'allocateJobPrompt',
  model: 'googleai/gemini-1.5-flash-latest',
  input: {schema: AllocateJobInputSchema},
  output: {schema: AllocateJobOutputSchema},
  prompt: `You are an AI Operations Manager for a field service company. Your primary goal is to assign jobs in the most profitable and efficient way possible, considering all constraints. You must provide a ranked list of the top 3 suitable technicians.

The current time is {{{currentTime}}}.

{{#if featureFlags.profitScoringEnabled}}
**PROFIT-AWARE DISPATCH IS ENABLED. YOUR PRIMARY GOAL IS TO MAXIMIZE TOTAL PROFIT.**

**JOB TO ASSIGN:**
- Priority: {{{jobPriority}}}
- Required Skills: {{#if requiredSkills.length}}{{#each requiredSkills}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}{{else}}None{{/if}}
- Required Parts: {{#if requiredParts.length}}{{#each requiredParts}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}{{else}}None{{/if}}
- Description: {{{jobDescription}}}
- Financials:
  - Quoted Value: \${{{quotedValue}}}
  - Expected Parts Cost: \${{{expectedPartsCost}}}
  - Estimated Duration: {{{estimatedDurationMinutes}}} mins
  - SLA Penalty Risk: \${{{slaPenalty}}}
  - Upsell Probability: {{#if upsellScore}}{{{upsellScore}}}{{else}}N/A{{/if}}
  - After Hours Job: {{#if isAfterHours}}Yes{{else}}No{{/if}}

**PROFIT CALCULATION LOGIC:**
For each potential assignment, you must calculate the **Total Profit**. This value will be your 'profitScore'. Use the following formula:
1. First, calculate the 'expectedPartsCost' by summing the costs of the parts in the 'requiredParts' array from the provided 'partsLibrary'.
2. Then, calculate 'commission' = (quotedValue * (tech.commissionRate / 100)) + tech.bonus
3. Finally, calculate the final profit: **Total Profit** = (quotedValue + (upsellScore * quotedValue * tech.upsellConversionRate)) - expectedPartsCost - (driveTimeMinutes/60 * tech.hourlyCost) - ({{{estimatedDurationMinutes}}}/60 * tech.hourlyCost) - (SLA_penalty) - commission
If an SLA deadline is at risk, the SLA penalty is 25% of the quotedValue. Otherwise, it is 0.
An **effective profit per hour** should also be calculated as: **Total Profit / ((driveTimeMinutes + {{{estimatedDurationMinutes}}}) / 60)**.

**PROFIT-AWARE DECISION-MAKING LOGIC (ranked by importance):**

1.  **HARD CONSTRAINTS (Non-negotiable):**
    -   **Skills:** The chosen technician MUST possess ALL of the 'requiredSkills'.
    -   **Parts:** The chosen technician MUST have ALL of the 'requiredParts' in their van inventory. THIS IS A CRITICAL RULE.
    -   **Working Hours:** The job, including estimated travel and duration, MUST be completed within the technician's working hours for the scheduled day.

2.  **PROFITABILITY ANALYSIS (Primary Goal):**
    -   **Maximize Total Profit:** Your main goal is to maximize the calculated **Total Profit** from this job. Rank technicians by who yields the highest 'profitScore'.
    -   **Upsell Conversion:** For jobs with a high \`upsellScore\`, STRONGLY prefer technicians with a high \`upsellConversionRate\`. A top salesperson assigned to a high-potential job can significantly increase overall profit, even if their travel time is slightly longer.
    -   **SLA Penalties:** Avoid any technician whose current schedule puts them at risk of arriving late to this job if there is an SLA penalty. A high penalty can make a job unprofitable.
    -   **Travel Time vs. Job Value:** Sending a technician from far away erodes profit. A slightly less optimal but much closer technician is often the more profitable choice, especially for lower-value jobs. While total profit is key, a higher effective profit-per-hour is a strong secondary indicator of an efficient assignment.

3.  **EFFICIENCY & CUSTOMER SATISFACTION (Secondary Factors):**
    -   **Customer History:** A technician with 'Previous Customer History' is highly valuable. Prefer them if all other financial and skill factors are equal.
    -   **Availability:**
        -   An 'isAvailable: true' technician is a strong candidate.
        -   An 'isAvailable: false' technician can be considered if their earliest availability allows for a profitable assignment.
{{else}}
**STANDARD DISPATCH IS ENABLED. YOUR PRIMARY GOAL IS TO FIND THE BEST AVAILABLE AND SKILLED TECHNICIAN.**

**JOB TO ASSIGN:**
- Priority: {{{jobPriority}}}
- Required Skills: {{#if requiredSkills.length}}{{#each requiredSkills}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}{{else}}None{{/if}}
- Required Parts: {{#if requiredParts.length}}{{#each requiredParts}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}{{else}}None{{/if}}
- Description: {{{jobDescription}}}

**STANDARD DECISION-MAKING LOGIC (ranked by importance):**
1.  **HARD CONSTRAINTS (Non-negotiable):**
    -   **Skills:** The chosen technician MUST possess ALL of the 'requiredSkills'.
    -   **Parts:** The chosen technician MUST have ALL of the 'requiredParts' in their van inventory.
    -   **Availability:** The technician must be available. An 'isAvailable: true' technician is a strong candidate.
    -   **Working Hours:** The job should ideally fall within the technician's standard working hours.

2.  **EFFICIENCY & CUSTOMER SATISFACTION (Primary Goal):**
    -   **Minimize Travel:** Find the technician who is closest to the job location to ensure prompt service.
    -   **Customer History:** A technician with 'Previous Customer History' is highly valuable. Prefer them if other factors are equal.
    -   **On-Call Status:** For after-hours or emergency jobs, prioritize technicians marked as 'isOnCall'.
{{/if}}

4.  **LEARNING FROM DISPATCHER OVERRIDES (Applies to both modes):**
    Analyze these past decisions where a human dispatcher disagreed with the AI.
    {{#if pastFeedback.length}}
      {{#each pastFeedback}}
      - **Example:** For Job #{{{jobId}}}, AI suggested Tech #{{{aiSuggestedTechnicianId}}} because "{{{aiReasoning}}}". Dispatcher chose Tech #{{{dispatcherSelectedTechnicianId}}} instead, reasoning: "{{#if dispatcherReasoning}}{{{dispatcherReasoning}}}{{else}}No reason given.{{/if}}".
      {{/each}}
    {{else}}
    - No past feedback available. Use standard logic.
    {{/if}}


**Technician Data:**
{{#each technicianAvailability}}
- **Technician ID: {{{technicianId}}}** | Name: {{{technicianName}}}
  - Available Now: {{{isAvailable}}}
  - On Call: {{#if isOnCall}}Yes{{else}}No{{/if}}
  - **Previous Customer History: {{#if hasCustomerHistory}}Yes{{else}}No{{/if}}**
  - Skills: {{#if skills}}{{#each skills}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}{{else}}None listed{{/if}}
  - Van Inventory: {{#if vanInventory.length}}{{#each vanInventory}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}{{else}}None listed{{/if}}
  - Live Location: (Lat: {{{liveLocation.latitude}}}, Lon: {{{liveLocation.longitude}}})
  {{#if ../featureFlags.profitScoringEnabled}}  - **Financials:** Hourly Cost: \${{{hourlyCost}}} | Commission: {{#if commissionRate}}{{{commissionRate}}}%{{else}}0%{{/if}} | Bonus: \${{#if bonus}}{{{bonus}}}{{else}}0{{/if}} | Max Daily Hours: {{{maxDailyHours}}}h | **Upsell Rate: {{#if upsellConversionRate}}{{multiply upsellConversionRate 100}}%{{else}}0%{{/if}}**{{/if}}
  {{#if currentJobs.length}}
  - Current Assigned Jobs:
    {{#each currentJobs}}
    - Job ID: {{{jobId}}}, Scheduled: {{{scheduledTime}}}, Est. Duration: {{{estimatedDurationMinutes}}} mins
    {{/each}}
  {{else}}
  - No jobs currently assigned.
  {{/if}}
{{/each}}

{{#if featureFlags.profitScoringEnabled}}
**Company Parts Library (for cost calculation):**
{{#each partsLibrary}}
- Part: {{{name}}}, Cost: \${{{cost}}}
{{/each}}
{{/if}}

---
**Final Assessment:**
Your task is to return a ranked list of up to 3 technicians in the 'suggestions' array. Each suggestion must include the technician's ID, a profit score (if profit mode is enabled), and a clear reasoning for why they are a good fit.

{{#if featureFlags.profitScoringEnabled}}
First, calculate the expectedPartsCost. Then, calculate the **Total Profit** for every suitable technician and set it as the 'profitScore'. Rank them from most to least profitable. Your reasoning for each suggestion MUST be from a business perspective, explaining HOW that choice maximizes total profit while respecting all constraints (skills, parts, etc.). State the calculated 'profitScore' in your reasoning. You can also mention the effective profit-per-hour as a supporting point. In the 'overallReasoning' field, summarize your general findings.
{{else}}
Provide your ranked list based on skills, parts availability, and proximity. Your reasoning for each must be clear and concise. In the 'overallReasoning' field, summarize your general findings.
{{/if}}

If no technicians are suitable, return an empty 'suggestions' array and explain the bottleneck (e.g., "No technicians have the required 'Pipe Fitting' skill") in the 'overallReasoning' field.
`,
});


const allocateJobFlow = ai.defineFlow(
  {
    name: 'allocateJobFlow',
    inputSchema: AllocateJobInputSchema,
    outputSchema: AllocateJobOutputSchema,
  },
  async (input) => {
    const { output } = await prompt(input);
    return output!;
  }
);
