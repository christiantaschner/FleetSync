
// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview An AI agent that suggests the most suitable technician for a new job.
 *
 * - allocateJob - A function that suggests the most suitable technician for a new job.
 */

import {ai} from '@/ai/genkit';
import {
  type AllocateJobInput,
  AllocateJobInputSchema,
  type AllocateJobOutput,
  AllocateJobOutputSchema,
  type DispatcherFeedback,
} from '@/types';
import { dbAdmin } from '@/lib/firebase-admin';
import { collection, query, where, orderBy, limit, getDocs, doc, getDoc } from 'firebase/firestore';


export async function allocateJob(input: AllocateJobInput, appId: string): Promise<AllocateJobOutput> {
  // The logic to augment with feedback has been moved to ai-actions.ts
  // This keeps the core flow clean and focused on just the AI call.
  return allocateJobFlow(input);
}

const prompt = ai.definePrompt({
  name: 'allocateJobPrompt',
  model: 'googleai/gemini-1.5-flash-latest',
  input: {schema: AllocateJobInputSchema},
  output: {schema: AllocateJobOutputSchema},
  prompt: `You are an AI Operations Manager for a field service company. Your primary goal is to assign jobs in the most profitable and efficient way possible, considering all constraints. You must provide a ranked list of the top 3 suitable technicians.

The current time is {{{currentTime}}}.

{{#if featureFlags.profitScoringEnabled}}
**PROFIT-AWARE DISPATCH IS ENABLED. YOUR PRIMARY GOAL IS TO MAXIMIZE TOTAL PROFIT.**

**JOB TO ASSIGN:**
- Priority: {{{jobPriority}}}
- Required Skills: {{#if requiredSkills.length}}{{#each requiredSkills}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}{{else}}None{{/if}}
- Required Parts: {{#if requiredParts.length}}{{#each requiredParts}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}{{else}}None{{/if}}
- Description: {{{jobDescription}}}
- Financials:
  - Quoted Value: \${{{quotedValue}}}
  - Expected Parts Cost: \${{{expectedPartsCost}}}
  - Estimated Duration: {{{estimatedDurationMinutes}}} mins
  - SLA Penalty Risk: \${{{slaPenalty}}}
  - Upsell Probability: {{#if upsellScore}}{{{upsellScore}}}{{else}}N/A{{/if}}
  - After Hours Job: {{#if isAfterHours}}Yes{{else}}No{{/if}}

**PROFIT CALCULATION LOGIC:**
Your main ranking metric is a **Weighted Profit Score**. Calculate this score for each suitable technician.

First, calculate the **Net Profit**:
'Net Profit = (Quoted Value + (Upsell Score * Quoted Value * Tech's Upsell Rate)) - Expected Parts Cost - (Travel Time Cost) - (On-Site Labor Cost) - (SLA Penalty) - (Commission)'

-   'On-Site Labor Cost' = (Estimated Duration / 60) * Tech's Hourly Cost
-   'Travel Time Cost' = (Estimated Drive Time / 60) * Tech's Hourly Cost
-   'Commission' = (Quoted Value * (Tech's Commission Rate / 100)) + Tech's Bonus
-   'SLA Penalty': If at risk, apply a 25% penalty on the Quoted Value. Otherwise, it's $0.

Second, calculate the **Profit Per Hour** (Profit Velocity):
'Total Time (in hours) = (Estimated Drive Time + Estimated Duration) / 60'
'Profit Per Hour = Net Profit / Total Time'

Finally, calculate the **Weighted Profit Score**:
'**Weighted Score = (Net Profit * 0.7) + (Profit Per Hour * 0.3)**'

This score balances the immediate profit of the job with the speed and efficiency of the technician, maximizing their availability for future profitable jobs.

**PROFIT-AWARE DECISION-MAKING LOGIC (ranked by importance):**

1.  **HARD CONSTRAINTS (Non-negotiable):**
    -   **Skills & Parts:** The chosen technician MUST possess ALL 'requiredSkills' and have ALL 'requiredParts' in their van.
    -   **Working Hours:** The job, including travel, must be completed within the technician's working hours.

2.  **PROFITABILITY ANALYSIS (Primary Goal):**
    -   **Maximize Weighted Score:** Your main goal is to maximize the calculated **Weighted Profit Score** for this assignment.
    -   **Upsell Conversion:** For jobs with high quoted values, STRONGLY prefer technicians with a high 'upsellConversionRate'.
    -   **SLA Penalties:** Avoid any technician whose schedule puts them at risk of arriving late if there is an SLA penalty.

3.  **EFFICIENCY & CUSTOMER SATISFACTION (Secondary Factors):**
    -   **Customer History:** Prefer technicians with 'Previous Customer History' if all other financial factors are close.
    -   **Availability:** An 'isAvailable: true' technician is a strong candidate. Consider a busy technician only if their schedule allows for a highly profitable assignment.
{{else}}
**STANDARD DISPATCH IS ENABLED. YOUR PRIMARY GOAL IS TO FIND THE BEST AVAILABLE AND SKILLED TECHNICIAN.**

**JOB TO ASSIGN:**
- Priority: {{{jobPriority}}}
- Required Skills: {{#if requiredSkills.length}}{{#each requiredSkills}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}{{else}}None{{/if}}
- Required Parts: {{#if requiredParts.length}}{{#each requiredParts}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}{{else}}None{{/if}}
- Description: {{{jobDescription}}}

**STANDARD DECISION-MAKING LOGIC (ranked by importance):**
1.  **HARD CONSTRAINTS (Non-negotiable):**
    -   **Skills:** The chosen technician MUST possess ALL of the 'requiredSkills'.
    -   **Parts:** The chosen technician MUST have ALL of the 'requiredParts' in their van inventory.
    -   **Availability:** The technician must be available.
    -   **Working Hours:** The job should ideally fall within the technician's standard working hours.

2.  **EFFICIENCY & CUSTOMER SATISFACTION (Primary Goal):**
    -   **Minimize Travel:** Find the technician who is closest to the job location.
    -   **Customer History:** A technician with 'Previous Customer History' is highly valuable.
    -   **On-Call Status:** For after-hours jobs, prioritize technicians marked as 'isOnCall'.
{{/if}}

4.  **LEARNING FROM DISPATCHER OVERRIDES (Applies to both modes):**
    Analyze these past decisions where a human dispatcher disagreed with the AI.
    {{#if pastFeedback.length}}
      {{#each pastFeedback}}
      - **Example:** For Job #{{{jobId}}}, AI suggested Tech #{{{aiSuggestedTechnicianId}}} because "{{{aiReasoning}}}". Dispatcher chose Tech #{{{dispatcherSelectedTechnicianId}}} instead, reasoning: "{{#if dispatcherReasoning}}{{{dispatcherReasoning}}}{{else}}No reason given.{{/if}}".
      {{/each}}
    {{else}}
    - No past feedback available. Use standard logic.
    {{/if}}


**Technician Data:**
{{#each technicianAvailability}}
- **Technician ID: {{{technicianId}}}** | Name: {{{technicianName}}}
  - Available Now: {{{isAvailable}}}
  - On Call: {{#if isOnCall}}Yes{{else}}No{{/if}}
  - **Previous Customer History: {{#if hasCustomerHistory}}Yes{{else}}No{{/if}}**
  - Skills: {{#if skills}}{{#each skills}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}{{else}}None listed{{/if}}
  - Van Inventory: {{#if vanInventory.length}}{{#each vanInventory}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}{{else}}None listed{{/if}}
  - Live Location: (Lat: {{{liveLocation.latitude}}}, Lon: {{{liveLocation.longitude}}})
  {{#if ../featureFlags.profitScoringEnabled}}  - **Financials:** Hourly Cost: \${{{hourlyCost}}} | Commission: {{#if commissionRate}}{{{commissionRate}}}%{{else}}0%{{/if}} | Bonus: \${{#if bonus}}{{{bonus}}}{{else}}0{{/if}} | Max Daily Hours: {{{maxDailyHours}}}h | **Upsell Rate: {{#if upsellConversionRate}}{{multiply upsellConversionRate 100}}%{{else}}0%{{/if}}**{{/if}}
  {{#if currentJobs.length}}
  - Current Assigned Jobs:
    {{#each currentJobs}}
    - Job ID: {{{jobId}}}, Scheduled: {{{scheduledTime}}}, Est. Duration: {{{estimatedDurationMinutes}}} mins
    {{/each}}
  {{else}}
  - No jobs currently assigned.
  {{/if}}
{{/each}}

{{#if featureFlags.profitScoringEnabled}}
**Company Parts Library (for cost calculation):**
{{#each partsLibrary}}
- Part: {{{name}}}, Cost: \${{{cost}}}
{{/each}}
{{/if}}

---
**Final Assessment:**
Your task is to return a ranked list of up to 3 technicians in the 'suggestions' array.

{{#if featureFlags.profitScoringEnabled}}
First, calculate the **Weighted Profit Score** for every suitable technician and set this final value as the 'profitScore'. Rank them from highest to lowest score. Your reasoning for each suggestion MUST be from a business perspective, explaining HOW that choice maximizes profit and efficiency while respecting all constraints (skills, parts, etc.). State the calculated 'profitScore' in your reasoning. In the 'overallReasoning' field, summarize your general findings.
{{else}}
Provide your ranked list based on skills, parts availability, and proximity. Your reasoning for each must be clear and concise. In the 'overallReasoning' field, summarize your general findings.
{{/if}}

If no technicians are suitable, return an empty 'suggestions' array and explain the bottleneck (e.g., "No technicians have the required 'Pipe Fitting' skill") in the 'overallReasoning' field.
`
});

const allocateJobFlow = ai.defineFlow(
  {
    name: 'allocateJobFlow',
    inputSchema: AllocateJobInputSchema,
    outputSchema: AllocateJobOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
