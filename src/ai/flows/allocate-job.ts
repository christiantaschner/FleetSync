
// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview An AI agent that suggests the most suitable technician for a new job.
 *
 * - allocateJob - A function that suggests the most suitable technician for a new job.
 */

import {ai} from '@/ai/genkit';
import {
  type AllocateJobInput,
  AllocateJobInputSchema,
  type AllocateJobOutput,
  AllocateJobOutputSchema,
  type DispatcherFeedback,
} from '@/types';
import { dbAdmin } from '@/lib/firebase-admin';
import { collection, query, where, orderBy, limit, getDocs, doc, getDoc } from 'firebase/firestore';


export async function allocateJob(input: AllocateJobInput, appId: string): Promise<AllocateJobOutput> {
  // 1. Augment the input with past feedback for the AI
  if (dbAdmin && input.technicianAvailability.length > 0) {
    const firstTech = input.technicianAvailability[0];
    const techDocRef = doc(dbAdmin, `artifacts/${appId}/public/data/technicians`, firstTech.technicianId);
    const companyId = (await getDoc(techDocRef)).data()?.companyId;

    if (companyId) {
        const feedbackCollectionRef = collection(dbAdmin, `artifacts/${appId}/public/data/dispatcherFeedback`);
        const feedbackQuery = query(
            feedbackCollectionRef,
            where("companyId", "==", companyId),
            orderBy("createdAt", "desc"),
            limit(5) // Get the last 5 feedback examples
        );
        const feedbackSnapshot = await getDocs(feedbackQuery);
        const pastFeedback = feedbackSnapshot.docs.map(doc => doc.data() as DispatcherFeedback);
        input.pastFeedback = pastFeedback;
    }
  }
  
  // 2. Call the flow with the augmented input
  return allocateJobFlow(input);
}

const prompt = ai.definePrompt({
  name: 'allocateJobPrompt',
  model: 'googleai/gemini-1.5-flash-latest',
  input: {schema: AllocateJobInputSchema},
  output: {schema: AllocateJobOutputSchema},
  prompt: `You are an AI Operations Manager for a field service company. Your primary goal is to assign jobs in the most profitable and efficient way possible, considering all constraints.

The current time is {{{currentTime}}}.

{{#if featureFlags.profitScoringEnabled}}
**PROFIT-AWARE DISPATCH IS ENABLED. YOUR PRIMARY GOAL IS TO MAXIMIZE PROFIT.**

**JOB TO ASSIGN:**
- Priority: {{{jobPriority}}}
- Required Skills: {{#if requiredSkills.length}}{{#each requiredSkills}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}{{else}}None{{/if}}
- Required Parts: {{#if requiredParts.length}}{{#each requiredParts}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}{{else}}None{{/if}}
- Description: {{{jobDescription}}}
- Financials:
  - Quoted Value: \${{{quotedValue}}}
  - Expected Parts Cost: \${{{expectedPartsCost}}}
  - SLA Penalty Risk: \${{{slaPenalty}}}
  - Upsell Probability: {{#if upsellScore}}{{{upsellScore}}}{{else}}N/A{{/if}}
  - After Hours Job: {{#if isAfterHours}}Yes{{else}}No{{/if}}

**PROFIT CALCULATION LOGIC:**
For each potential assignment, you must calculate the 'profitScore'. Use the following formula:
profit = (quotedValue + (upsellScore * quotedValue)) - expectedPartsCost - (driveTimeMinutes/60 * tech.hourlyCost) - (durationEstimate/60 * tech.hourlyCost) - (SLA_penalty)
If an SLA deadline is at risk, the SLA penalty is 25% of the quotedValue. Otherwise, it is 0.

**PROFIT-AWARE DECISION-MAKING LOGIC (ranked by importance):**

1.  **HARD CONSTRAINTS (Non-negotiable):**
    -   **Skills:** The chosen technician MUST possess ALL of the 'requiredSkills'.
    -   **Parts:** The chosen technician MUST have ALL of the 'requiredParts' in their van inventory. THIS IS A CRITICAL RULE.
    -   **Working Hours:** The job, including estimated travel and duration, MUST be completed within the technician's working hours for the scheduled day.

2.  **PROFITABILITY ANALYSIS (Primary Goal):**
    -   **Maximize Margin:** Your main goal is to maximize the calculated profit from this job. Choose the technician who yields the highest 'profitScore'.
    -   **SLA Penalties:** Avoid any technician whose current schedule puts them at risk of arriving late to this job if there is an SLA penalty. A high penalty can make a job unprofitable.
    -   **After-Hours Costs:** If the job is marked 'After Hours', be aware that this may incur higher labor costs. Prioritize technicians who are already working or on-call to minimize activating another technician.
    -   **Travel Time vs. Job Value:** Sending a technician from far away erodes profit. A slightly less optimal but much closer technician is often the more profitable choice, especially for lower-value jobs.

3.  **EFFICIENCY & CUSTOMER SATISFACTION (Secondary Factors):**
    -   **Customer History:** A technician with 'Previous Customer History' is highly valuable. Prefer them if all other financial and skill factors are equal.
    -   **Availability:**
        -   An 'isAvailable: true' technician is a strong candidate.
        -   An 'isAvailable: false' technician can be considered if their earliest availability allows for a profitable assignment.
{{else}}
**STANDARD DISPATCH IS ENABLED. YOUR PRIMARY GOAL IS TO FIND THE BEST AVAILABLE AND SKILLED TECHNICIAN.**

**JOB TO ASSIGN:**
- Priority: {{{jobPriority}}}
- Required Skills: {{#if requiredSkills.length}}{{#each requiredSkills}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}{{else}}None{{/if}}
- Required Parts: {{#if requiredParts.length}}{{#each requiredParts}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}{{else}}None{{/if}}
- Description: {{{jobDescription}}}

**STANDARD DECISION-MAKING LOGIC (ranked by importance):**
1.  **HARD CONSTRAINTS (Non-negotiable):**
    -   **Skills:** The chosen technician MUST possess ALL of the 'requiredSkills'.
    -   **Parts:** The chosen technician MUST have ALL of the 'requiredParts' in their van inventory.
    -   **Availability:** The technician must be available. An 'isAvailable: true' technician is a strong candidate.
    -   **Working Hours:** The job should ideally fall within the technician's standard working hours.

2.  **EFFICIENCY & CUSTOMER SATISFACTION (Primary Goal):**
    -   **Minimize Travel:** Find the technician who is closest to the job location to ensure prompt service.
    -   **Customer History:** A technician with 'Previous Customer History' is highly valuable. Prefer them if other factors are equal.
    -   **On-Call Status:** For after-hours or emergency jobs, prioritize technicians marked as 'isOnCall'.
{{/if}}

4.  **LEARNING FROM DISPATCHER OVERRIDES (Applies to both modes):**
    Analyze these past decisions where a human dispatcher disagreed with the AI.
    {{#if pastFeedback.length}}
      {{#each pastFeedback}}
      - **Example:** For Job #{{{jobId}}}, AI suggested Tech #{{{aiSuggestedTechnicianId}}} because "{{{aiReasoning}}}". Dispatcher chose Tech #{{{dispatcherSelectedTechnicianId}}} instead, reasoning: "{{#if dispatcherReasoning}}{{{dispatcherReasoning}}}{{else}}No reason given.{{/if}}".
      {{/each}}
    {{else}}
    - No past feedback available. Use standard logic.
    {{/if}}


**Technician Data:**
{{#each technicianAvailability}}
- **Technician ID: {{{technicianId}}}** | Name: {{{technicianName}}}
  - Available Now: {{{isAvailable}}}
  - On Call: {{#if isOnCall}}Yes{{else}}No{{/if}}
  - **Previous Customer History: {{#if hasCustomerHistory}}Yes{{else}}No{{/if}}**
  - Skills: {{#if skills}}{{#each skills}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}{{else}}None listed{{/if}}
  - Van Inventory: {{#if vanInventory.length}}{{#each vanInventory}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}{{else}}None listed{{/if}}
  - Live Location: (Lat: {{{liveLocation.latitude}}}, Lon: {{{liveLocation.longitude}}})
  {{#if ../featureFlags.profitScoringEnabled}} - Hourly Cost: \${{{hourlyCost}}} | Max Daily Hours: {{{maxDailyHours}}}h {{/if}}
  {{#if currentJobs.length}}
  - Current Assigned Jobs:
    {{#each currentJobs}}
    - Job ID: {{{jobId}}}, Scheduled: {{{scheduledTime}}}, Est. Duration: {{{estimatedDurationMinutes}}} mins
    {{/each}}
  {{else}}
  - No jobs currently assigned.
  {{/if}}
{{/each}}

---
**Final Assessment:**
{{#if featureFlags.profitScoringEnabled}}
First, calculate the profitScore for every suitable technician. Then, provide your final decision on the best technician. Your reasoning MUST be from a business perspective, explaining HOW your choice maximizes profit while respecting all constraints (skills, parts, etc.). State the calculated profit score in your reasoning. If no technician can be profitably or safely assigned, state this clearly and explain the bottleneck.
{{else}}
Provide your final decision on the best technician. Your reasoning MUST be based on skills, parts availability, and proximity. If no technician is suitable, state this clearly and explain the bottleneck.
{{/if}}
`,
});


const allocateJobFlow = ai.defineFlow(
  {
    name: 'allocateJobFlow',
    inputSchema: AllocateJobInputSchema,
    outputSchema: AllocateJobOutputSchema,
  },
  async (input) => {
    const { output } = await prompt(input);
    return output!;
  }
);
