
// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview An AI agent that suggests the most suitable technician for a new job.
 *
 * - allocateJob - A function that suggests the most suitable technician for a new job.
 * - AllocateJobInput - The input type for the allocateJob function.
 * - AllocateJobOutput - The return type for the allocateJob function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AllocateJobInputSchema = z.object({
  jobDescription: z.string().describe('The description of the job to be assigned.'),
  jobPriority: z.enum(['High', 'Medium', 'Low']).describe('The priority of the job.'),
  requiredSkills: z.array(z.string()).optional().describe('A list of skills explicitly required for this job. This is a hard requirement.'),
  scheduledTime: z.string().optional().describe('Optional specific requested appointment time by the customer (ISO 8601 format). This should be strongly considered.'),
  technicianAvailability: z.array(
    z.object({
      technicianId: z.string().describe('The unique identifier of the technician.'),
      technicianName: z.string().describe('The name of the technician.'),
      isAvailable: z.boolean().describe('Whether the technician is currently available. This is a critical factor; unavailable technicians should not be chosen.'),
      skills: z.array(z.string()).describe('The skills possessed by the technician.'),
      location: z
        .object({
          latitude: z.number().describe('The latitude of the technician.'),
          longitude: z.number().describe('The longitude of the technician.'),
        })
        .describe('The current location of the technician.'),
    })
  ).describe('A list of technicians and their availability, skills, and location.'),
});
export type AllocateJobInput = z.infer<typeof AllocateJobInputSchema>;

const AllocateJobOutputSchema = z.object({
  suggestedTechnicianId: z.string().describe('The ID of the most suitable technician for the job.'),
  reasoning: z.string().describe('The reasoning behind the technician suggestion.'),
});
export type AllocateJobOutput = z.infer<typeof AllocateJobOutputSchema>;

export async function allocateJob(input: AllocateJobInput): Promise<AllocateJobOutput> {
  return allocateJobFlow(input);
}

const prompt = ai.definePrompt({
  name: 'allocateJobPrompt',
  input: {schema: AllocateJobInputSchema},
  output: {schema: AllocateJobOutputSchema},
  prompt: `You are an AI assistant helping dispatchers allocate jobs to field technicians.

  Your primary goal is to suggest the most suitable technician for the job. You MUST prioritize technicians where 'isAvailable' is true. Do not suggest a technician who is unavailable.
  
  {{#if requiredSkills.length}}
  CRITICAL: The job explicitly requires the following skills: {{#each requiredSkills}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}. The chosen technician MUST possess ALL of these skills. This is a non-negotiable constraint.
  {{/if}}

  Given the following job description and a list of technicians with their availability, skills, and location, suggest the most suitable technician for the job.
  Consider the job priority when making your suggestion.
  {{#if scheduledTime}}Crucially, the customer has requested a specific appointment time: {{{scheduledTime}}}. The suggested technician must be able to meet this appointment, considering their current location and other commitments. Factor this heavily into your decision.{{/if}}

  Job Description: {{{jobDescription}}}
  Job Priority: {{{jobPriority}}}

  Technician Availability:
  {{#each technicianAvailability}}
  - Technician ID: {{{technicianId}}}, Name: {{{technicianName}}}, Available: {{{isAvailable}}}, Skills: {{#each skills}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}, Location: (Latitude: {{{location.latitude}}}, Longitude: {{{location.longitude}}})
  {{/each}}

  Suggest the most suitable technician ID and explain your reasoning.
  In your reasoning, refer to technicians by their name (e.g., "Technician Alice Smith is available...") instead of their ID.
  Ensure that the outputted suggestedTechnicianId exists in the technicianAvailability array and has 'isAvailable' set to true.
  If a scheduledTime is provided, explicitly state in your reasoning how the chosen technician can meet this appointment.
  `,
});

const allocateJobFlow = ai.defineFlow(
  {
    name: 'allocateJobFlow',
    inputSchema: AllocateJobInputSchema,
    outputSchema: AllocateJobOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
