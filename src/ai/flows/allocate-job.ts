
// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview An AI agent that suggests the most suitable technician for a new job.
 *
 * - allocateJob - A function that suggests the most suitable technician for a new job.
 */

import {ai} from '@/ai/genkit';
import {
  type AllocateJobInput,
  AllocateJobInputSchema,
  type AllocateJobOutput,
  AllocateJobOutputSchema
} from '@/types';

export async function allocateJob(input: AllocateJobInput): Promise<AllocateJobOutput> {
  return allocateJobFlow(input);
}

const prompt = ai.definePrompt({
  name: 'allocateJobPrompt',
  model: 'googleai/gemini-1.5-flash-latest',
  input: {schema: AllocateJobInputSchema},
  output: {schema: AllocateJobOutputSchema},
  prompt: `You are an AI assistant helping dispatchers allocate jobs to field technicians. Your decision must be based on a balance of skill, availability, and location.

**TASK:**
Given the following job and technician data, suggest the most suitable technician.

**Job Details:**
- Description: {{{jobDescription}}}
- Priority: {{{jobPriority}}}
{{#if scheduledTime}}- Customer Requested Time: {{{scheduledTime}}}{{/if}}

{{#if requiredSkills.length}}
**CRITICAL SKILL REQUIREMENT:** The job explicitly requires the following skills: {{#each requiredSkills}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}. The chosen technician MUST possess ALL of these skills. This is a non-negotiable constraint.
{{/if}}

**Technician Data:**
{{#each technicianAvailability}}
- **Technician ID: {{{technicianId}}}**
  - Name: {{{technicianName}}}
  - Available: {{{isAvailable}}}
  - Skills: {{#if skills}}{{#each skills}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}{{else}}None listed{{/if}}
  - Location: (Lat: {{{location.latitude}}}, Lon: {{{location.longitude}}})
  {{#if currentJobs.length}}
  - Current Assigned Jobs:
  {{#each currentJobs}}
    - Job ID: {{{jobId}}}, Priority: {{{priority}}}{{#if scheduledTime}}, Scheduled: {{{scheduledTime}}}{{/if}}
  {{/each}}
  {{/if}}
{{/each}}

---
**DECISION-MAKING LOGIC:**

1.  **Skill Match:** The technician MUST have ALL \`requiredSkills\`. If no technician has the required skills, no one is suitable.
2.  **Job Priority Logic:**
    *   **If the job priority is 'High':**
        *   STRONGLY prefer any technician who is \`isAvailable: true\`. Their other \`currentJobs\` for later in the day do not matter for this decision. Choose the closest available and skilled technician.
        *   If NO technician is \`isAvailable: true\`, you MAY suggest a technician who is \`isAvailable: false\` BUT is currently working on a 'Low' priority job. This is an interruption.
        *   NEVER suggest interrupting a technician on a 'Medium' or 'High' priority job.
    *   **If the job priority is 'Medium' or 'Low':**
        *   Only consider technicians who are \`isAvailable: true\`.
        *   Consider their \`currentJobs\` to ensure they have capacity.

---
Provide a clear reasoning for your choice. Refer to technicians by name, not ID. If you suggest an interruption, state it clearly. If no technician is suitable, explain why.
`,
});

const allocateJobFlow = ai.defineFlow(
  {
    name: 'allocateJobFlow',
    inputSchema: AllocateJobInputSchema,
    outputSchema: AllocateJobOutputSchema,
  },
  async input => {
    try {
      const { output } = await prompt(input);
      if (!output) {
        return {
          suggestedTechnicianId: null,
          reasoning: "The AI model could not determine a suitable technician based on the provided constraints (e.g., skills, availability) or generated an invalid response.",
        };
      }
      return output;
    } catch (error) {
      return {
        suggestedTechnicianId: null,
        reasoning: `The AI model encountered an error during processing: ${error instanceof Error ? error.message : String(error)}`,
      };
    }
  }
);
