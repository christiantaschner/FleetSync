// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview An AI agent that suggests the most suitable technician for a new job.
 *
 * - allocateJob - A function that suggests the most suitable technician for a new job.
 */

import {ai} from '@/ai/genkit';
import {
  type AllocateJobInput,
  AllocateJobInputSchema,
  type AllocateJobOutput,
  AllocateJobOutputSchema,
  type DispatcherFeedback,
} from '@/types';
import { dbAdmin } from '@/lib/firebase-admin';
import { collection, query, where, orderBy, limit, getDocs, doc, getDoc } from 'firebase/firestore';


export async function allocateJob(input: AllocateJobInput, appId: string): Promise<AllocateJobOutput> {
  // 1. Augment the input with past feedback for the AI
  if (dbAdmin && input.technicianAvailability.length > 0) {
    const firstTech = input.technicianAvailability[0];
    const techDocRef = doc(dbAdmin, `artifacts/${appId}/public/data/technicians`, firstTech.technicianId);
    const companyId = (await getDoc(techDocRef)).data()?.companyId;

    if (companyId) {
        const feedbackCollectionRef = collection(dbAdmin, `artifacts/${appId}/public/data/dispatcherFeedback`);
        const feedbackQuery = query(
            feedbackCollectionRef,
            where("companyId", "==", companyId),
            orderBy("createdAt", "desc"),
            limit(5) // Get the last 5 feedback examples
        );
        const feedbackSnapshot = await getDocs(feedbackQuery);
        const pastFeedback = feedbackSnapshot.docs.map(doc => doc.data() as DispatcherFeedback);
        input.pastFeedback = pastFeedback;
    }
  }
  
  // 2. Call the flow with the augmented input
  return allocateJobFlow(input);
}

const prompt = ai.definePrompt({
  name: 'allocateJobPrompt',
  model: 'googleai/gemini-1.5-flash-latest',
  input: {schema: AllocateJobInputSchema},
  output: {schema: AllocateJobOutputSchema},
  prompt: `You are an AI assistant helping dispatchers allocate jobs to field technicians. Your decision must be based on a balance of skill, availability, location, customer history, and individual schedules.
You must also learn from past dispatcher decisions.

The current time is {{{currentTime}}}.

**TASK & DECISION-MAKING LOGIC (STEP-BY-STEP):**

1.  **Job Day Analysis**: First, determine if the job is for **today** or a **future day** by comparing its scheduled time to the current time.

2.  **Availability & Timeline Calculation**:
    -   **For TODAY's Jobs**:
        -   If a technician is 'isAvailable: true', they are a primary candidate. Their travel time starts from their 'liveLocation'.
        -   If a technician is 'isAvailable: false', calculate their *Earliest Next Availability*. This is (current job's startedAt + estimatedDurationMinutes) + 15 min buffer. Then, estimate travel time from their current job's location to the new job site. If this combined time allows them to arrive before the end of the workday, they are a potential candidate.
    -   **For FUTURE DAY's Jobs**:
        -   The current 'isAvailable' status is IRRELEVANT.
        -   Check their 'currentJobs' list to see if they are already booked on that future day. A technician who is 'isAvailable: false' now can still be assigned a job for tomorrow if their schedule for that day is open. Their travel for a future job will start from their 'homeBaseLocation'.

3.  **Skill & Customer History Check**:
    -   **CRITICAL SKILL REQUIREMENT:** The job explicitly requires the following skills: {{#if requiredSkills.length}}{{#each requiredSkills}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}{{else}}None{{/if}}. The chosen technician MUST possess ALL of these skills. This is a non-negotiable constraint.
    -   Filter out any technician who does not meet ALL 'requiredSkills'.
    -   If a skilled, available technician also has 'Previous Customer History', they should be **strongly prioritized** over others. This reflects an established customer relationship which is very valuable.

**LEARNING FROM PAST DECISIONS:**
Analyze the following examples where a human dispatcher overrode the AI's suggestion. These reveal the company's hidden preferences. Learn from them.
{{#if pastFeedback.length}}
  {{#each pastFeedback}}
  - **Example:** For Job #{{{jobId}}}, the AI suggested Technician #{{{aiSuggestedTechnicianId}}} because "{{{aiReasoning}}}". The dispatcher disagreed and chose Technician #{{{dispatcherSelectedTechnicianId}}} instead.
  {{/each}}
{{else}}
- No past feedback available. Use standard logic.
{{/if}}

**Technician Data:**
{{#each technicianAvailability}}
- **Technician ID: {{{technicianId}}}**
  - Name: {{{technicianName}}}
  - Available Now: {{{isAvailable}}}
  - On Call for Emergencies: {{#if isOnCall}}Yes{{else}}No{{/if}}
  - **Previous Customer History: {{#if hasCustomerHistory}}Yes{{else}}No{{/if}}**
  - Skills: {{#if skills}}{{#each skills}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}{{else}}None listed{{/if}}
  - Live Location: (Lat: {{{liveLocation.latitude}}}, Lon: {{{liveLocation.longitude}}})
  - Home Base: {{{homeBaseLocation.address}}}
  {{#if currentJobs.length}}
  - Current Assigned Jobs for Today/Tomorrow:
    {{#each currentJobs}}
    - Job ID: {{{jobId}}}, Location: ({{{location.latitude}}}, {{{location.longitude}}}), Priority: {{{priority}}}{{#if scheduledTime}}, Scheduled: {{{scheduledTime}}}{{/if}}, Started At: {{#if startedAt}}{{{startedAt}}}{{else}}Not Started{{/if}}, Est. Duration: {{{estimatedDurationMinutes}}} mins
    {{/each}}
  {{else}}
  - No jobs currently assigned.
  {{/if}}
  {{#if workingHours}}
  - Working Hours:
    {{#each workingHours}}
    - {{dayOfWeek}}: {{#if isOpen}}{{startTime}} - {{endTime}}{{else}}Off{{/if}}
    {{/each}}
  {{else}}
  - No defined working hours. Assume standard 8 AM to 5 PM.
  {{/if}}
{{/each}}

---
**Final Sanity Check (Self-Correction):**
Before providing your final answer, review your suggested technician. Does the proposed schedule respect their working hours for the given day? Have you correctly accounted for all hard constraints like skills? If not, reconsider and choose the next best option.

---
Provide a clear reasoning for your choice, explicitly mentioning how customer history, skill match, and calculated availability (including travel time estimates) influenced your decision. Refer to technicians by name, not ID. If no technician is suitable, explain why (e.g., "No technician has the 'Boiler Repair' skill," or "All qualified technicians are fully booked for the day.").
`,
});

const allocateJobFlow = ai.defineFlow(
  {
    name: 'allocateJobFlow',
    inputSchema: AllocateJobInputSchema,
    outputSchema: AllocateJobOutputSchema,
  },
  async (input) => {
    const { output } = await prompt(input);
    return output!;
  }
);
